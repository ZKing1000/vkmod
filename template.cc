#include "include/vkmod.hpp"

namespace vkmod {
//std::map<std::string, std::vector<const char*>> map0;

  template <>
  std::vector<vk::PhysicalDevice> ls<vk::PhysicalDevice>() {
    vk::Instance i = get<Package<vk::Instance>>().vkobj;
    return i.enumeratePhysicalDevices();
  }

  template <>
  vk::Device get() {
    auto gpu = get<vk::PhysicalDevice>();
    vk::DeviceCreateInfo inf = vk::DeviceCreateInfo();
  }

  template <>
  std::vector<Family> ls() {
  }

  _self self;

  Package<vk::Instance>::Package(vk::InstanceCreateInfo in) {
    this->vkinfo = in;
    this->vkobj = vk::createInstance(in);
  }

  /*
  Package<vk::Instance>::Package() {
    auto appinfo = get<vk::ApplicationInfo>();
    vk::InstanceCreateInfo wtf = vk::InstanceCreateInfo().setPApplicationInfo(&appinfo)
      .setEnabledLayerCount(get<std::vector<const char*>*>("layers")->size())
      .setPpEnabledLayerNames(get<std::vector<const char*>*>("layers")->data())
      .setEnabledExtensionCount(get<std::vector<const char*>*>("extensions")->size())
      .setPpEnabledExtensionNames(get<std::vector<const char*>*>("extensions")->data());
    this->vkinfo = wtf;
    this->vkobj = vk::createInstance(wtf);
  }
  */

  vkmod::Package<vk::Device>::Package() {

  }
  vkmod::Package<vk::SwapchainKHR>::Package() {

  }
  vkmod::Package<vk::Image>::Package() {

  }
  vkmod::Package<vk::CommandPool>::Package() {

  }
  Package<vk::Instance>::Package():
    Package(vk::InstanceCreateInfo()
      .setPApplicationInfo(get<vk::ApplicationInfo*>())
      .setEnabledLayerCount(get<std::vector<const char*>*>("layers")->size())
      .setPpEnabledLayerNames(get<std::vector<const char*>*>("layers")->data())
      .setEnabledExtensionCount(get<std::vector<const char*>*>("extensions")->size())
      .setPpEnabledExtensionNames(get<std::vector<const char*>*>("extensions")->data())
    )
  {
  }

  /* BEGIN AUTOGENERATED CODE SEGMENT */
  /* END AUTOGENERATED CODE SEGMENT   */


  void create_instance() {
    std::cout << get<vk::ApplicationInfo*>()->pEngineName << std::endl;
    vk::ApplicationInfo tmp0 = get<vk::ApplicationInfo>();
    auto tmp1 = get<std::vector<const char*>>("layers").size();
    std::cout << tmp1 << std::endl;
    auto p = Package<vk::Instance>();
    push(p);
    std::cout << p.vkobj << std::endl;
  }

  void create_devices() {
    static std::vector<vk::Device> devs;
    auto gpus = ls<vk::PhysicalDevice>();
    auto gpu = gpus[0];
    auto family_properties = gpu.getQueueFamilyProperties();
    for (uint32_t idx=0; idx < family_properties.size(); idx++) {
      auto fam = family_properties[idx];
    }
  }

  void init(){
    create_instance();
    create_devices();
  }

  Window::Swapchain::Swapchain(Device dev) {

  }

  Window::Window(Device dev, vk::SurfaceKHR surf) {

  }

  Pipeline::Pipeline(Device dev) {

    }

}
