#ifndef _VKMOD_HPP
#define _VKMOD_HPP
#include <vulkan/vulkan.hpp>
#include <map>
#include <iostream>
#include <functional>
#include <chrono>
#include <thread>
#include <stack>
#include <iostream>

namespace vkmod
{

  #define KNRM  "\x1B[0m"
  #define KRED  "\x1B[31m"
  #define KGRN  "\x1B[32m"
  #define KYEL  "\x1B[33m"
  #define KBLU  "\x1B[34m"
  #define KMAG  "\x1B[35m"
  #define KCYN  "\x1B[36m"
  #define KWHT  "\x1B[37m"

  void massert(bool conn, std::string message) {
    if (!conn) {
      std::cerr << KRED << "(vkmod error): " << KYEL << message << std::endl;
      exit(1);
    }
  }

  void massert(bool conn, std::string block, std::string message) {
    if (!conn) {
      std::cerr << KRED << "(vkmod error): " << block << " " << KYEL << message << std::endl;
      exit(1);
    }
  }

  template <typename T>
  struct Package {
  };

  /* BEGIN AUTOGENERATED CODE SEGMENT */
  /*<python>
  #for pak in env.packages:
  #  write(pak.declarations)
  </python>*/
  /* END AUTOGENERATED CODE SEGMENT   */

  struct Family {
    uint32_t idx;

    std::vector<vk::Queue> queues;
  };

  struct Device {
    vk::PhysicalDevice gpu;
    vk::Device dev;
    vk::Queue queue;
  };

  struct Window {
    struct Swapchain {
      vk::SwapchainKHR skhr;
      std::vector<vk::Image> v_i;
      std::vector<vk::ImageView> v_iv;
      vk::Semaphore acq_next_img;
      vk::Semaphore ren_finished;

      Swapchain() {}
      Swapchain(Device dev);
    };

    Swapchain swapchain;
    vk::SurfaceKHR skhr;
    vk::RenderPass rp;

    Window() {}
    Window(Device dev, vk::SurfaceKHR surf);
  };

  struct Pipeline {
    vk::Pipeline pipeline;

    Pipeline() {}
    Pipeline(Device dev);
  };

  struct _context {
    /* BEGIN AUTOGENERATED CODE SEGMENT */
    /*<python>
    for c in env.vkstructures:
      write(env.indentblock("vk::{0} {1};\n".format(c, env.NAME(c))))
    </python>*/
    /* END AUTOGENERATED CODE SEGMENT   */

    std::map<std::string, void*> bind_map; //string key to value

    _context();
  };

  extern _context ctx;

  template <typename T>
  std::vector<T> ls();


  template <typename T>
  T get();

  template <typename T>
  T get(std::string key);

  template <typename T>
  void pop();

  /* BEGIN AUTOGENERATED CODE SEGMENT */
  /*<python>
  </python>*/
  /* END AUTOGENERATED CODE SEGMENT   */

  namespace cmd {
    void barrier (Package<vk::ImageMemoryBarrier> imgbar) {

    }
    void clear (Package<vk::Image> img) {

    }
  }
  void init();
  void loop() {}
  #ifdef _VKMOD_IMPLEMENTATION


  /*<python>
  </python>*/

  _self::_self() {
    /*<python>
    </python>*/
  }
  #endif
}

#ifdef _VKMOD_IMPLEMENTATION

  /*<python>
  mfp = open("template.cc", 'r')
  lns = mfp.read().split('\n')
  mfp.close()
  write ("\n".join(lns[1:len(lns)-1]))
  </python>*/
#endif

#endif
